---
// Check authentication
import Header from '../../components/Header.astro';
const isAuthenticated = Astro.cookies.get('admin_auth')?.value === 'authenticated';
if (!isAuthenticated) {
  return Astro.redirect('/admin');
}

let results = null;
let error = null;
let processing = false;

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const urlsText = formData.get('urls') as string;
  const shouldProcess = formData.get('process') === 'true';
  
  if (!urlsText || !urlsText.trim()) {
    error = 'Please enter at least one Amazon URL';
  } else {
    try {
      // Split URLs by line breaks and filter out empty lines
      const urls = urlsText
        .split('\n')
        .map(url => url.trim())
        .filter(url => url.length > 0);
      
      if (urls.length === 0) {
        error = 'No valid URLs found';
      } else if (!shouldProcess) {
        // Just validate URLs
        results = {
          total: urls.length,
          processed: 0,
          successful: 0,
          failed: 0,
          urls: urls,
          message: `Ready to process ${urls.length} URL${urls.length === 1 ? '' : 's'}`,
          validated: true
        };
      } else {
        // Actually process the URLs
        processing = true;
        const processedResults = [];
        let successful = 0;
        let failed = 0;
        
        console.log(`🔄 Starting bulk processing of ${urls.length} URLs...`);
        
        for (let i = 0; i < urls.length; i++) {
          const amazonUrl = urls[i];
          console.log(`\n📦 Processing ${i + 1}/${urls.length}: ${amazonUrl}`);
          
          try {
            // Extract ASIN from URL
            const asinMatch = amazonUrl.match(/(?:\/dp\/|\/gp\/product\/|ASIN\/|product\/)([A-Z0-9]{10})/i);
            if (!asinMatch) {
              throw new Error('Could not extract ASIN from URL');
            }
            const asin = asinMatch[1];
            
            // Generate affiliate URL
            const affiliateTag = import.meta.env.AFFILIATE_TAG || 'yourtag-20';
            const affiliateUrl = `https://www.amazon.com/dp/${asin}?tag=${affiliateTag}`;
            
            // Generate product content
            let productContent;
            try {
              const { generateProductContent } = await import('../../lib/content');
              productContent = await generateProductContent(asin, amazonUrl);
            } catch (contentError) {
              console.warn('Content generation failed, using fallback:', contentError);
              productContent = {
                title: `Product ${asin}`,
                description: 'Product description could not be generated. Please add manually.',
                slug: `product-${asin.toLowerCase()}`
              };
            }

            // Get product image URL using Puppeteer
            let imageUrl;
            try {
              const { getProductImageUrl } = await import('../../lib/amazon-scraper');
              imageUrl = await getProductImageUrl(amazonUrl, asin, productContent.title);
              console.log(`✅ Image extracted: ${imageUrl}`);
            } catch (imageError) {
              console.warn('Image URL generation failed, using fallback:', imageError);
              imageUrl = `https://m.media-amazon.com/images/I/${asin}._AC_SL500_.jpg`; // Fallback
            }

            // Save to Airtable
            let airtableResult;
            try {
              const { createProduct } = await import('../../lib/airtable');
              airtableResult = await createProduct({
                title: productContent.title,
                description: productContent.description,
                affiliateUrl: affiliateUrl,
                imageUrl: imageUrl
              });
              
              successful++;
              processedResults.push({
                url: amazonUrl,
                asin: asin,
                title: productContent.title,
                imageUrl: imageUrl,
                status: 'success',
                airtableId: airtableResult.id
              });
              
              console.log(`✅ Successfully processed: ${productContent.title}`);
            } catch (airtableError) {
              failed++;
              processedResults.push({
                url: amazonUrl,
                asin: asin,
                title: productContent.title,
                imageUrl: imageUrl,
                status: 'error',
                error: String(airtableError)
              });
              
              console.warn(`❌ Airtable save failed for ${asin}:`, airtableError);
            }
            
          } catch (err) {
            failed++;
            processedResults.push({
              url: amazonUrl,
              status: 'error',
              error: String(err)
            });
            
            console.error(`❌ Error processing ${amazonUrl}:`, err);
          }
          
          // Add a small delay between requests to be respectful
          if (i < urls.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 2000));
          }
        }
        
        results = {
          total: urls.length,
          processed: urls.length,
          successful: successful,
          failed: failed,
          details: processedResults,
          message: `Processed ${urls.length} URLs: ${successful} successful, ${failed} failed`,
          completed: true
        };
        
        console.log(`🎉 Bulk processing completed: ${successful}/${urls.length} successful`);
      }
    } catch (err) {
      error = 'Error processing URLs: ' + String(err);
    }
  }
}
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bulk Add Products - Admin Dashboard</title>
  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      background: #f5f5f5;
    }
    .main-container {
      padding: 20px;
    }
    .container {
      max-width: 1000px;
      margin: 0 auto;
      background: white;
      padding: 30px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
      padding-bottom: 20px;
      border-bottom: 1px solid #eee;
    }
    .form-group {
      margin-bottom: 20px;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    textarea {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
      min-height: 200px;
      font-family: monospace;
    }
    .btn {
      background: #007bff;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      text-decoration: none;
      display: inline-block;
      margin-right: 10px;
    }
    .btn:hover {
      background: #0056b3;
    }
    .btn-secondary {
      background: #6c757d;
    }
    .btn-secondary:hover {
      background: #545b62;
    }
    .error {
      color: #dc3545;
      background: #f8d7da;
      padding: 10px;
      border-radius: 4px;
      margin-bottom: 20px;
      border: 1px solid #f5c6cb;
    }
    .success {
      color: #155724;
      background: #d4edda;
      padding: 10px;
      border-radius: 4px;
      margin-bottom: 20px;
      border: 1px solid #c3e6cb;
    }
    .warning {
      color: #856404;
      background: #fff3cd;
      padding: 10px;
      border-radius: 4px;
      margin-bottom: 20px;
      border: 1px solid #ffeaa7;
    }
    .url-preview {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 4px;
      margin-top: 20px;
    }
    .url-list {
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 10px;
    }
    .url-item {
      padding: 5px 0;
      border-bottom: 1px solid #eee;
      font-family: monospace;
      font-size: 12px;
    }
    .help-text {
      font-size: 14px;
      color: #666;
      margin-top: 5px;
    }
    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 15px;
      margin: 20px 0;
    }
    .stat-card {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 4px;
      text-align: center;
      border: 1px solid #dee2e6;
    }
    .stat-number {
      font-size: 24px;
      font-weight: bold;
      color: #007bff;
    }
    .stat-label {
      font-size: 12px;
      color: #666;
      margin-top: 5px;
    }
  </style>
</head>
<body>
  <Header />
  <div class="main-container">
    <div class="container">
    <div class="header">
      <h1>📦 Bulk Add Products</h1>
      <div>
        <a href="/admin" class="btn btn-secondary">Back to Dashboard</a>
        <a href="/admin/add-product" class="btn">Single Product</a>
      </div>
    </div>

    <div class="info">
      <strong>Ready for Bulk Processing!</strong> Enter Amazon URLs below to extract real product images using Puppeteer and add products to your catalog.
    </div>

    {error && (
      <div class="error">
        <strong>Error:</strong> {error}
      </div>
    )}

    {results && results.validated && (
      <div class="success">
        <strong>URLs Parsed Successfully!</strong> {results.message}
        
        <div class="stats">
          <div class="stat-card">
            <div class="stat-number">{results.total}</div>
            <div class="stat-label">Total URLs</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">{results.urls.filter(url => url.includes('amazon')).length}</div>
            <div class="stat-label">Amazon URLs</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">{results.urls.filter(url => !url.includes('amazon')).length}</div>
            <div class="stat-label">Other URLs</div>
          </div>
        </div>

        <div class="url-preview">
          <h3>URLs to Process:</h3>
          <div class="url-list">
            {results.urls.map((url, index) => (
              <div class="url-item">
                {index + 1}. {url}
              </div>
            ))}
          </div>
        </div>
        
        <form method="POST" style="margin-top: 20px;">
          <input type="hidden" name="urls" value={results.urls.join('\n')} />
          <input type="hidden" name="process" value="true" />
          <button type="submit" class="btn" style="background: #28a745;">
            🚀 Process All {results.total} URLs
          </button>
        </form>
      </div>
    )}

    {results && results.completed && (
      <div class="success">
        <strong>Bulk Processing Complete!</strong> {results.message}
        
        <div class="stats">
          <div class="stat-card">
            <div class="stat-number">{results.total}</div>
            <div class="stat-label">Total URLs</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">{results.successful}</div>
            <div class="stat-label">Successful</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">{results.failed}</div>
            <div class="stat-label">Failed</div>
          </div>
        </div>

        <div class="url-preview">
          <h3>Processing Results:</h3>
          <div class="url-list">
            {results.details.map((item, index) => (
              <div class="url-item" style={`color: ${item.status === 'success' ? '#155724' : '#721c24'}`}>
                {index + 1}. {item.status === 'success' ? '✅' : '❌'} {item.title || item.url}
                {item.status === 'error' && (
                  <div style="font-size: 10px; color: #dc3545; margin-top: 2px;">
                    Error: {item.error}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
    )}

    <form method="POST">
      <div class="form-group">
        <label for="urls">Amazon Product URLs (one per line):</label>
        <textarea 
          id="urls" 
          name="urls" 
          required 
          placeholder="https://www.amazon.com/dp/B123456789
https://www.amazon.com/dp/B987654321
https://amazon.com/gp/product/B555666777

Paste one URL per line..."
        ></textarea>
        <div class="help-text">
          Enter multiple Amazon URLs, one per line. Empty lines will be ignored. 
          The system will process each URL to extract ASINs, generate content, and add to your product catalog.
        </div>
      </div>

      <button type="submit" class="btn">Parse URLs</button>
    </form>

    <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee;">
      <h3>Bulk Processing Workflow:</h3>
      <ol>
        <li><strong>URL Validation:</strong> Check that URLs are valid Amazon product links</li>
        <li><strong>ASIN Extraction:</strong> Extract product identifiers from each URL</li>
        <li><strong>Content Generation:</strong> Generate titles and descriptions for each product</li>
        <li><strong>Affiliate Conversion:</strong> Convert to affiliate URLs with your tag</li>
        <li><strong>Batch Import:</strong> Add all products to Airtable in one operation</li>
      </ol>
      
      <p><strong>Coming Soon:</strong></p>
      <ul>
        <li>Real-time processing with progress indicators</li>
        <li>Error handling for individual URLs</li>
        <li>Retry failed URLs</li>
        <li>Duplicate detection</li>
      </ul>
    </div>
    </div>
  </div>
</body>
</html> 