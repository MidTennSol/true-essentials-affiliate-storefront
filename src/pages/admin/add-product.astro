---
// Check authentication
import Header from '../../components/Header.astro';
const isAuthenticated = Astro.cookies.get('admin_auth')?.value === 'authenticated';
if (!isAuthenticated) {
  return Astro.redirect('/admin');
}

let result = null;
let error = null;

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const amazonUrl = formData.get('amazon_url') as string;
  
  if (!amazonUrl || !amazonUrl.trim()) {
    error = 'Please enter an Amazon URL';
  } else {
    try {
      // Simple ASIN extraction (inline logic)
      let asin = null;
      const asinPatterns = [
        /\/dp\/([A-Z0-9]{10})/,
        /\/gp\/product\/([A-Z0-9]{10})/,
        /\/product\/([A-Z0-9]{10})/,
        /asin=([A-Z0-9]{10})/i
      ];
      
      for (const pattern of asinPatterns) {
        const match = amazonUrl.match(pattern);
        if (match) {
          asin = match[1];
          break;
        }
      }
      
      if (!asin) {
        error = 'Could not extract ASIN from URL. Please check the Amazon URL format.';
      } else {
        // Create affiliate URL (inline logic)
        const affiliateTag = import.meta.env.AFFILIATE_TAG || 'yourtag-20';
        const affiliateUrl = `https://www.amazon.com/dp/${asin}?tag=${affiliateTag}`;
        
        // Generate product content using simple approach
        let productContent;
        try {
          // Import the content generation function
          const { generateProductContent } = await import('../../lib/content');
          
          productContent = await generateProductContent(asin, amazonUrl);
        } catch (contentError) {
          console.warn('Content generation failed, using fallback:', contentError);
          productContent = {
            title: `Product`,
            description: 'Product description could not be generated. Please add manually.',
            slug: `product`
          };
        }

        // Get product image URL
        let imageUrl;
        try {
          const { getProductImageUrl } = await import('../../lib/amazon-scraper');
          imageUrl = await getProductImageUrl(amazonUrl, asin, productContent.title);
        } catch (imageError) {
          console.warn('Image URL generation failed, using fallback:', imageError);
          imageUrl = `https://m.media-amazon.com/images/I/${asin}._AC_SL500_.jpg`; // Fallback
        }

        // Save to Airtable
        let airtableResult;
        try {
          const { createProduct } = await import('../../lib/airtable');
          airtableResult = await createProduct({
            title: productContent.title,
            description: productContent.description,
            affiliateUrl: affiliateUrl,
            imageUrl: imageUrl
          });
          
          result = {
            asin: asin,
            originalUrl: amazonUrl,
            affiliateUrl: affiliateUrl,
            title: productContent.title,
            description: productContent.description,
            slug: airtableResult.fields.Slug, // Use the slug generated by Airtable
            imageUrl: imageUrl,
            airtableId: airtableResult.id,
            message: '‚úÖ Product successfully added to catalog!',
            saved: true
          };
        } catch (airtableError) {
          console.error('Airtable save failed:', airtableError);
          console.error('Data being sent to createProduct:', {
            title: productContent.title,
            description: productContent.description,
            affiliateUrl: affiliateUrl,
            imageUrl: imageUrl
          });
          console.error('üîó Image URL details:', {
            url: imageUrl,
            length: imageUrl?.length,
            type: typeof imageUrl,
            encoded: JSON.stringify(imageUrl)
          });
          result = {
            asin: asin,
            originalUrl: amazonUrl,
            affiliateUrl: affiliateUrl,
            title: productContent.title,
            description: productContent.description,
            slug: productContent.slug, // Use local slug since Airtable save failed
            imageUrl: imageUrl,
            message: `‚ö†Ô∏è Product processed but not saved to Airtable. Error: ${String(airtableError)}`,
            saved: false,
            airtableError: String(airtableError),
            // Add debug info for display
            debugInfo: {
              imageUrl: imageUrl,
              imageUrlLength: imageUrl?.length,
              imageUrlType: typeof imageUrl,
              imageUrlEncoded: JSON.stringify(imageUrl)
            }
          };
        }
      }
    } catch (err) {
      error = 'Error processing URL: ' + String(err);
    }
  }
}
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Product - Admin Dashboard</title>
  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      background: #f5f5f5;
    }
    .main-container {
      padding: 20px;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      background: white;
      padding: 30px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
      padding-bottom: 20px;
      border-bottom: 1px solid #eee;
    }
    .form-group {
      margin-bottom: 20px;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    input[type="url"] {
      width: 100%;
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 16px;
    }
    .btn {
      background: #007bff;
      color: white;
      padding: 12px 24px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      text-decoration: none;
      display: inline-block;
      margin-right: 10px;
      font-size: 16px;
    }
    .btn:hover {
      background: #0056b3;
    }
    .btn-secondary {
      background: #6c757d;
    }
    .btn-secondary:hover {
      background: #545b62;
    }
    .error {
      color: #dc3545;
      background: #f8d7da;
      padding: 15px;
      border-radius: 4px;
      margin-bottom: 20px;
      border: 1px solid #f5c6cb;
    }
    .success {
      color: #155724;
      background: #d4edda;
      padding: 15px;
      border-radius: 4px;
      margin-bottom: 20px;
      border: 1px solid #c3e6cb;
    }
    .info {
      color: #0c5460;
      background: #d1ecf1;
      padding: 15px;
      border-radius: 4px;
      margin-bottom: 20px;
      border: 1px solid #bee5eb;
    }
    .help-text {
      font-size: 14px;
      color: #666;
      margin-top: 5px;
    }
    .product-preview {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 4px;
      margin-top: 20px;
      border: 1px solid #dee2e6;
    }
    .detail-row {
      display: flex;
      margin-bottom: 10px;
      padding: 8px 0;
      border-bottom: 1px solid #eee;
    }
    .detail-label {
      font-weight: bold;
      width: 120px;
      color: #666;
    }
    .detail-value {
      flex: 1;
      font-family: monospace;
      font-size: 14px;
      word-break: break-all;
    }
    .workflow-steps {
      background: #fff3cd;
      padding: 20px;
      border-radius: 4px;
      margin-top: 30px;
      border: 1px solid #ffeaa7;
    }
    .action-buttons {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid #dee2e6;
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }
    .btn-success {
      background: #28a745;
      color: white;
    }
    .btn-success:hover {
      background: #218838;
    }
    .btn-info {
      background: #17a2b8;
      color: white;
    }
    .btn-info:hover {
      background: #138496;
    }
  </style>
</head>
<body>
  <Header />
  <div class="main-container">
    <div class="container">
    <div class="header">
      <h1>‚ûï Add Single Product</h1>
      <div>
        <a href="/admin" class="btn btn-secondary">Back to Dashboard</a>
        <a href="/admin/bulk-add" class="btn">Bulk Add</a>
      </div>
    </div>

    <div class="info">
      <strong>AI-Powered Product Addition</strong><br>
      This form extracts ASINs, creates affiliate URLs, and generates titles and descriptions using OpenAI.
      {import.meta.env.OPENAI_API_KEY ? 'ü§ñ AI content generation is enabled!' : '‚ö†Ô∏è Add OPENAI_API_KEY to enable AI content generation.'}
    </div>

    {error && (
      <div class="error">
        <strong>Error:</strong> {error}
      </div>
    )}

    {result && (
      <div class="success">
        <strong>‚úÖ Product Processed Successfully!</strong> {result.message}
        
        <div class="product-preview">
          <h3>Product Details:</h3>
          <div class="detail-row">
            <div class="detail-label">ASIN:</div>
            <div class="detail-value">{result.asin}</div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Original URL:</div>
            <div class="detail-value">{result.originalUrl}</div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Affiliate URL:</div>
            <div class="detail-value">
              <a href={result.affiliateUrl} target="_blank">{result.affiliateUrl}</a>
            </div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Title:</div>
            <div class="detail-value">{result.title}</div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Description:</div>
            <div class="detail-value">{result.description}</div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Slug:</div>
            <div class="detail-value">{result.slug}</div>
          </div>
          {result.imageUrl && (
            <div class="detail-row">
              <div class="detail-label">Image:</div>
              <div class="detail-value">
                <img src={result.imageUrl} alt={result.title} style="max-width: 200px; height: auto; border-radius: 4px; margin-top: 5px;" />
                <br />
                <small style="color: #666; font-size: 12px;">{result.imageUrl}</small>
              </div>
            </div>
          )}
          {result.airtableId && (
            <div class="detail-row">
              <div class="detail-label">Airtable ID:</div>
              <div class="detail-value">{result.airtableId}</div>
            </div>
          )}
          {result.airtableError && (
            <div class="detail-row">
              <div class="detail-label">Save Error:</div>
              <div class="detail-value" style="color: #dc3545;">{result.airtableError}</div>
            </div>
          )}
          {result.debugInfo && (
            <div style="background: #f8f9fa; padding: 15px; border-radius: 4px; margin-top: 15px; border: 1px solid #dee2e6;">
              <h4 style="margin-top: 0; color: #495057;">üîç Debug Information:</h4>
              <div class="detail-row">
                <div class="detail-label">Image URL:</div>
                <div class="detail-value" style="font-family: monospace; color: #e83e8c;">{result.debugInfo.imageUrl}</div>
              </div>
              <div class="detail-row">
                <div class="detail-label">URL Length:</div>
                <div class="detail-value">{result.debugInfo.imageUrlLength}</div>
              </div>
              <div class="detail-row">
                <div class="detail-label">URL Type:</div>
                <div class="detail-value">{result.debugInfo.imageUrlType}</div>
              </div>
              <div class="detail-row">
                <div class="detail-label">Encoded URL:</div>
                <div class="detail-value" style="font-family: monospace; color: #6f42c1;">{result.debugInfo.imageUrlEncoded}</div>
              </div>
            </div>
          )}
          
          {/* Action buttons for successful products */}
          {result.saved && result.slug && result.airtableId && (
            <div class="action-buttons">
              <a href={`/products/${result.slug}`} class="btn btn-success" target="_blank">
                üëÅÔ∏è View Product Page
              </a>
              <a href={result.affiliateUrl} class="btn btn-info" target="_blank">
                üõí View on Amazon
              </a>
            </div>
          )}
        </div>
      </div>
    )}

    <form method="POST">
      <div class="form-group">
        <label for="amazon_url">Amazon Product URL:</label>
        <input 
          type="url" 
          id="amazon_url" 
          name="amazon_url" 
          required 
          placeholder="https://www.amazon.com/dp/B123456789"
          pattern="https?://.*amazon.*"
        />
        <div class="help-text">
          Enter a valid Amazon product URL. Supported formats:
          <ul>
            <li>https://www.amazon.com/dp/B123456789</li>
            <li>https://amazon.com/gp/product/B123456789</li>
            <li>https://www.amazon.com/product-name/dp/B123456789</li>
          </ul>
        </div>
      </div>

      <button type="submit" class="btn">Process Product</button>
    </form>

    <div class="workflow-steps">
      <h3>üîÑ Current Workflow:</h3>
      <ol>
        <li><strong>‚úÖ URL Validation:</strong> Check that the URL is a valid Amazon product link</li>
        <li><strong>‚úÖ ASIN Extraction:</strong> Extract the product identifier from the URL</li>
        <li><strong>‚úÖ Affiliate URL Creation:</strong> Generate affiliate URL with your tag</li>
        <li><strong>‚úÖ AI Content Generation:</strong> Generate compelling title and description using OpenAI</li>
        <li><strong>‚úÖ Slug Generation:</strong> Create SEO-friendly URL slug from title</li>
        <li><strong>‚úÖ Airtable Storage:</strong> Save product to your catalog with auto-generated slug</li>
      </ol>
      
      <p><strong>Enhancement Ideas:</strong></p>
      <ul>
        <li>Add duplicate detection before saving</li>
        <li>Implement image URL extraction from Amazon</li>
        <li>Add product category classification</li>
        <li>Implement bulk processing with progress tracking</li>
      </ul>
    </div>
    </div>
  </div>
</body>
</html> 